
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 21 18:50:56 ART 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import scanner.*;
import ast.*;
import Tables.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 21 18:50:56 ART 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\010\000\002\007\003\000" +
    "\002\007\003\000\002\006\010\000\002\010\003\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\012\006\000\002\013\006\000\002\014\004" +
    "\000\002\014\003\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\044\002\000\002\016\005\000\002\017\004\000\002\017" +
    "\003\000\002\020\007\000\002\020\011\000\002\021\003" +
    "\000\002\021\003\000\002\024\007\000\002\025\013\000" +
    "\002\022\004\000\002\022\005\000\002\023\005\000\002" +
    "\023\003\000\002\026\003\000\002\026\006\000\002\027" +
    "\005\000\002\027\003\000\002\045\002\000\002\046\002" +
    "\000\002\047\002\000\002\050\002\000\002\051\002\000" +
    "\002\031\015\000\002\030\005\000\002\030\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\005\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\005" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\006\000\002\041\003\000\002\041" +
    "\003\000\002\042\005\000\002\042\003\000\002\043\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\005\013\010\010\001\002\000\004\002" +
    "\201\001\002\000\010\002\ufffc\005\ufffc\010\ufffc\001\002" +
    "\000\010\002\ufffd\005\ufffd\010\ufffd\001\002\000\010\002" +
    "\000\005\013\010\010\001\002\000\004\041\ufff8\001\002" +
    "\000\004\041\014\001\002\000\010\002\ufffe\005\ufffe\010" +
    "\ufffe\001\002\000\004\041\ufff9\001\002\000\010\022\015" +
    "\024\017\036\016\001\002\000\006\005\013\010\024\001" +
    "\002\000\032\002\ufffb\004\ufffb\005\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\022\ufffb\026\ufffb\027\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\001\002\000\004\040\020\001\002\000\004\025\021" +
    "\001\002\000\004\036\022\001\002\000\032\002\ufffa\004" +
    "\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\022\ufffa\026\ufffa" +
    "\027\ufffa\036\ufffa\040\ufffa\041\ufffa\001\002\000\006\023" +
    "\ufff6\037\176\001\002\000\006\023\ufff5\041\ufff8\001\002" +
    "\000\004\041\173\001\002\000\004\023\030\001\002\000" +
    "\006\023\ufff3\037\ufff3\001\002\000\004\026\032\001\002" +
    "\000\010\002\ufff7\005\ufff7\010\ufff7\001\002\000\030\004" +
    "\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb\022\uffbb\026\uffbb" +
    "\027\uffbb\036\uffbb\040\uffbb\041\uffbb\001\002\000\030\004" +
    "\uffbb\005\013\010\010\011\uffbb\012\uffbb\022\uffbb\026\uffbb" +
    "\027\uffbb\036\uffbb\040\uffbb\041\uffbb\001\002\000\030\004" +
    "\uffee\005\uffee\010\uffee\011\uffee\012\uffee\022\uffee\026\uffee" +
    "\027\uffee\036\uffee\040\uffee\041\uffee\001\002\000\024\004" +
    "\050\011\045\012\066\022\044\026\032\027\065\036\064" +
    "\040\052\041\051\001\002\000\030\004\uffef\005\uffef\010" +
    "\uffef\011\uffef\012\uffef\022\uffef\026\uffef\027\uffef\036\uffef" +
    "\040\uffef\041\uffef\001\002\000\024\004\uffec\011\uffec\012" +
    "\uffec\022\uffec\026\uffec\027\uffec\036\uffec\040\uffec\041\uffec" +
    "\001\002\000\004\041\041\001\002\000\006\024\017\036" +
    "\016\001\002\000\004\007\uffe2\001\002\000\024\004\uffed" +
    "\011\uffed\012\uffed\022\uffed\026\uffed\027\uffed\036\uffed\040" +
    "\uffed\041\uffed\001\002\000\010\022\044\040\052\041\051" +
    "\001\002\000\004\022\165\001\002\000\030\004\uffea\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\022\uffea\026\uffea\027\uffea" +
    "\036\uffea\040\uffea\041\uffea\001\002\000\030\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\023\uffc7\025\uffc7" +
    "\031\uffc7\036\uffc7\037\uffc7\001\002\000\004\022\157\001" +
    "\002\000\036\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\144\023\uffda\024\145\025\uffda\031" +
    "\uffda\036\uffda\037\uffda\001\002\000\030\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023\uffc1\025\uffc1\031" +
    "\uffc1\036\uffc1\037\uffc1\001\002\000\004\036\143\001\002" +
    "\000\030\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\117\020" +
    "\116\023\uffcb\025\uffcb\031\uffcb\036\uffcb\037\uffcb\001\002" +
    "\000\020\013\125\014\122\023\uffd7\025\uffd7\031\126\036" +
    "\uffd7\037\uffd7\001\002\000\024\013\uffcf\014\uffcf\015\111" +
    "\016\113\023\uffcf\025\uffcf\031\uffcf\036\uffcf\037\uffcf\001" +
    "\002\000\012\023\uffdb\025\uffdb\036\uffdb\037\uffdb\001\002" +
    "\000\030\004\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\022" +
    "\uffeb\026\uffeb\027\uffeb\036\uffeb\040\uffeb\041\uffeb\001\002" +
    "\000\030\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\022" +
    "\uffe9\026\uffe9\027\uffe9\036\uffe9\040\uffe9\041\uffe9\001\002" +
    "\000\004\007\uffe8\001\002\000\004\007\uffe1\001\002\000" +
    "\030\004\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\022\uffe5" +
    "\026\uffe5\027\uffe5\036\uffe5\040\uffe5\041\uffe5\001\002\000" +
    "\036\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\022\ufff0\026\ufff0\027\ufff0\036\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\004\022\073\001\002\000\030" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\023" +
    "\uffc2\025\uffc2\031\uffc2\036\uffc2\037\uffc2\001\002\000\032" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\071\023\uffc3\025\uffc3\031\uffc3\036\uffc3\037\uffc3\001\002" +
    "\000\010\022\044\040\052\041\051\001\002\000\012\023" +
    "\uffdc\025\uffdc\036\uffdc\037\uffdc\001\002\000\010\022\044" +
    "\040\052\041\051\001\002\000\004\037\075\001\002\000" +
    "\010\022\044\040\052\041\051\001\002\000\004\037\077" +
    "\001\002\000\010\022\044\040\052\041\051\001\002\000" +
    "\004\023\101\001\002\000\022\004\050\011\045\012\066" +
    "\022\044\026\032\036\064\040\052\041\051\001\002\000" +
    "\004\007\uffdf\001\002\000\004\007\104\001\002\000\012" +
    "\022\044\036\107\040\052\041\051\001\002\000\030\004" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\022\uffe7\026\uffe7" +
    "\027\uffe7\036\uffe7\040\uffe7\041\uffe7\001\002\000\004\036" +
    "\110\001\002\000\030\004\uffde\006\uffde\007\uffde\011\uffde" +
    "\012\uffde\022\uffde\026\uffde\027\uffde\036\uffde\040\uffde\041" +
    "\uffde\001\002\000\030\004\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\022\uffdd\026\uffdd\027\uffdd\036\uffdd\040\uffdd\041" +
    "\uffdd\001\002\000\010\022\uffca\040\uffca\041\uffca\001\002" +
    "\000\010\022\044\040\052\041\051\001\002\000\010\022" +
    "\uffc9\040\uffc9\041\uffc9\001\002\000\030\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\023\uffc3\025\uffc3\031" +
    "\uffc3\036\uffc3\037\uffc3\001\002\000\030\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\117\020\116\023\uffcc\025\uffcc\031" +
    "\uffcc\036\uffcc\037\uffcc\001\002\000\010\022\uffc5\040\uffc5" +
    "\041\uffc5\001\002\000\010\022\uffc6\040\uffc6\041\uffc6\001" +
    "\002\000\010\022\044\040\052\041\051\001\002\000\030" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023" +
    "\uffc8\025\uffc8\031\uffc8\036\uffc8\037\uffc8\001\002\000\010" +
    "\022\uffcd\040\uffcd\041\uffcd\001\002\000\010\022\044\040" +
    "\052\041\051\001\002\000\010\022\044\040\052\041\051" +
    "\001\002\000\010\022\uffce\040\uffce\041\uffce\001\002\000" +
    "\004\030\uffd6\001\002\000\004\030\130\001\002\000\004" +
    "\032\uffd5\001\002\000\004\032\132\001\002\000\004\033" +
    "\uffd4\001\002\000\004\033\134\001\002\000\004\034\uffd3" +
    "\001\002\000\004\034\136\001\002\000\004\035\uffd2\001" +
    "\002\000\004\035\140\001\002\000\010\022\uffd1\040\uffd1" +
    "\041\uffd1\001\002\000\016\013\125\014\122\023\uffd8\025" +
    "\uffd8\036\uffd8\037\uffd8\001\002\000\024\013\uffd0\014\uffd0" +
    "\015\111\016\113\023\uffd0\025\uffd0\031\uffd0\036\uffd0\037" +
    "\uffd0\001\002\000\030\004\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\012\uffe6\022\uffe6\026\uffe6\027\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\001\002\000\012\022\044\023\uffbb\040\052\041\051" +
    "\001\002\000\010\022\044\040\052\041\051\001\002\000" +
    "\004\025\147\001\002\000\032\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\025\uffd9\031" +
    "\uffd9\036\uffd9\037\uffd9\001\002\000\006\023\uffbf\037\155" +
    "\001\002\000\004\023\uffbe\001\002\000\006\023\uffbc\037" +
    "\uffbc\001\002\000\004\023\154\001\002\000\030\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\025" +
    "\uffc0\031\uffc0\036\uffc0\037\uffc0\001\002\000\010\022\044" +
    "\040\052\041\051\001\002\000\006\023\uffbd\037\uffbd\001" +
    "\002\000\010\022\044\040\052\041\051\001\002\000\004" +
    "\023\161\001\002\000\022\004\050\011\045\012\066\022" +
    "\044\026\032\036\064\040\052\041\051\001\002\000\030" +
    "\004\uffe4\006\163\007\uffe4\011\uffe4\012\uffe4\022\uffe4\026" +
    "\uffe4\027\uffe4\036\uffe4\040\uffe4\041\uffe4\001\002\000\022" +
    "\004\050\011\045\012\066\022\044\026\032\036\064\040" +
    "\052\041\051\001\002\000\030\004\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\022\uffe3\026\uffe3\027\uffe3\036\uffe3\040" +
    "\uffe3\041\uffe3\001\002\000\010\022\044\040\052\041\051" +
    "\001\002\000\004\023\167\001\002\000\022\004\050\011" +
    "\045\012\066\022\044\026\032\036\064\040\052\041\051" +
    "\001\002\000\004\007\uffe0\001\002\000\004\023\172\001" +
    "\002\000\030\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\023\uffc4\025\uffc4\031\uffc4\036\uffc4\037\uffc4\001" +
    "\002\000\010\023\ufff2\024\174\037\ufff2\001\002\000\004" +
    "\025\175\001\002\000\006\023\ufff1\037\ufff1\001\002\000" +
    "\006\005\013\010\010\001\002\000\006\023\ufff4\037\ufff4" +
    "\001\002\000\010\002\uffff\005\uffff\010\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\016\002\003\003\006\004\011\005\005\006" +
    "\004\007\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\177\005\005\006\004\007" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\024\010\025\011\022\012\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\030\001\001\000\002\001\001\000\006\014\032\043\033" +
    "\001\001\000\012\005\035\007\037\015\034\043\036\001" +
    "\001\000\002\001\001\000\040\013\045\016\042\017\057" +
    "\020\060\021\061\023\052\024\041\025\062\026\067\027" +
    "\056\030\054\033\055\035\053\037\046\040\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\170\026\067\027\056\030\054\033\055\035\053\037" +
    "\046\040\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\117\001\001" +
    "\000\006\031\123\032\122\001\001\000\004\034\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\071\026\067\027\056\030" +
    "\054\033\055\035\053\037\046\040\066\001\001\000\002" +
    "\001\001\000\022\023\073\026\067\027\056\030\054\033" +
    "\055\035\053\037\046\040\066\001\001\000\002\001\001" +
    "\000\022\023\075\026\067\027\056\030\054\033\055\035" +
    "\053\037\046\040\066\001\001\000\002\001\001\000\022" +
    "\023\077\026\067\027\056\030\054\033\055\035\053\037" +
    "\046\040\066\001\001\000\002\001\001\000\040\013\045" +
    "\016\101\017\057\020\060\021\061\023\052\024\041\025" +
    "\062\026\067\027\056\030\054\033\055\035\053\037\046" +
    "\040\066\001\001\000\002\001\001\000\004\022\104\001" +
    "\001\000\022\023\105\026\067\027\056\030\054\033\055" +
    "\035\053\037\046\040\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\113\035\114\037\046\040\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\113\037\120\040\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\113\033\141\035\053\037\046\040" +
    "\066\001\001\000\016\026\113\030\140\033\055\035\053" +
    "\037\046\040\066\001\001\000\002\001\001\000\004\045" +
    "\126\001\001\000\002\001\001\000\004\046\130\001\001" +
    "\000\002\001\001\000\004\047\132\001\001\000\002\001" +
    "\001\000\004\050\134\001\001\000\002\001\001\000\004" +
    "\051\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\122\001\001\000\004\034\111\001\001\000\002" +
    "\001\001\000\030\023\151\026\067\027\056\030\054\033" +
    "\055\035\053\037\046\040\066\041\152\042\147\043\150" +
    "\001\001\000\022\023\145\026\067\027\056\030\054\033" +
    "\055\035\053\037\046\040\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\155\026\067\027\056\030\054\033\055\035\053\037" +
    "\046\040\066\001\001\000\002\001\001\000\022\023\157" +
    "\026\067\027\056\030\054\033\055\035\053\037\046\040" +
    "\066\001\001\000\002\001\001\000\040\013\045\016\161" +
    "\017\057\020\060\021\061\023\052\024\041\025\062\026" +
    "\067\027\056\030\054\033\055\035\053\037\046\040\066" +
    "\001\001\000\002\001\001\000\040\013\045\016\163\017" +
    "\057\020\060\021\061\023\052\024\041\025\062\026\067" +
    "\027\056\030\054\033\055\035\053\037\046\040\066\001" +
    "\001\000\002\001\001\000\022\023\165\026\067\027\056" +
    "\030\054\033\055\035\053\037\046\040\066\001\001\000" +
    "\002\001\001\000\040\013\045\016\167\017\057\020\060" +
    "\021\061\023\052\024\041\025\062\026\067\027\056\030" +
    "\054\033\055\035\053\037\046\040\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\024" +
    "\012\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
    	    StringBuilder m = new StringBuilder("Error");
        	if (info instanceof java_cup.runtime.Symbol) {
            	java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+message);
        //System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= expression 
            {
              Object RESULT =null;
		
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= arg_list COMA expression 
            {
              Object RESULT =null;
		
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= empty 
            {
              Object RESULT =null;
		
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= arg_list 
            {
              Object RESULT =null;
		
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= ID PARENT_IZQ args PARENT_DER 
            {
              Nodo RESULT =null;
		
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //creo el nodo var que guardara el numero.
                        RESULT=new Var(Integer.parseInt(num));

                        
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= call 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=c;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= var 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= PARENT_IZQ expression PARENT_DER 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT=ex;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXPONENCIACION_2 
            {
              String RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=exp2;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // powop ::= EXPONENCIACION_1 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=exp1;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= exp 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor powop exp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //nueva operacion, se crea nuevo nodo Expression.
                        //if(a instanceof String && b instanceof String){
                        //                RESULT=new Expression(Integer.parseInt((String)a),ope,Integer.parseInt((String)b));
                        //            }else if(a instanceof String && b instanceof Nodo){
                        //                RESULT=new Expression(Integer.parseInt((String)a),ope,(Nodo)b);
                        //            }else if(a instanceof Nodo && b instanceof String){
                        //                RESULT=new Expression((Nodo)a,ope,Integer.parseInt((String)b));
                        //            }else if(a instanceof Nodo && b instanceof Nodo){
                        //                RESULT=new Expression((Nodo)a,ope,(Nodo)b);
                        //            }
                        //si no funciona, usar el condicionante.


                        RESULT=new Expression(a,ope,b);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= DIVISION 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=div;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= MULTIPLICACION 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=mu;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=f;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term mulop factor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //nueva operacion, creacion de nuevo nodo Expression.
                        //if(a instanceof String && b instanceof String){
                        //    RESULT=new Expression(Integer.parseInt((String)a),ope,Integer.parseInt((String)b));
                        //}else if(a instanceof String && b instanceof Nodo){
                        //    RESULT=new Expression(Integer.parseInt((String)a),ope,(Nodo)b);
                        //}else if(a instanceof Nodo && b instanceof String){
                        //    RESULT=new Expression((Nodo)a,ope,Integer.parseInt((String)b));
                        //}else if(a instanceof Nodo && b instanceof Nodo){
                        //    RESULT=new Expression((Nodo)a,ope,(Nodo)b);
                        //}
                        //se crea el nodo expression.
                        Expression e = new Expression(a,ope,b);
                        //se calcula el valor de la operacion.
                        e.calculoValor();
                        RESULT=e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= RESTA 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=res;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=sum;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= term 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT=t;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression addop term 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                    //otra nueva operacion. se crea otro nodo.
                                    //if(a instanceof String && b instanceof String){
                                    //    RESULT=new Expression(Integer.parseInt((String)a),ope,Integer.parseInt((String)b));
                                    //}else if(a instanceof String && b instanceof Nodo){
                                    //    RESULT=new Expression(Integer.parseInt((String)a),ope,(Nodo)b);
                                    //}else if(a instanceof Nodo && b instanceof String){
                                    //    RESULT=new Expression((Nodo)a,ope,Integer.parseInt((String)b));
                                    //}else if(a instanceof Nodo && b instanceof Nodo){
                                    //    RESULT=new Expression((Nodo)a,ope,(Nodo)b);
                                    //}
                                    //se crea el nodo expresion.
                                    Expression e = new Expression(a,ope,b);
                                    //se calcula el valor de la operacion.
                                    e.calculoValor();
                                    RESULT=e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= MENIGUAL NT$1 MENOR NT$2 MAYOR NT$3 MAYIGUAL NT$4 IGUALIGUAL NT$5 DISTINTO 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=dis;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        RESULT=ii;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        RESULT=may;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        RESULT=ma;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        RESULT=men;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$1 ::= 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        RESULT=me;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression 
            {
              Nodo RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ad = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT=ad;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= additive_expression relop additive_expression 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    //se condicionan todas las opciones posibles de derivaciones.
                                    //if(a instanceof String && b instanceof String){
                                    //    RESULT=new Expression(Integer.parseInt((String)a),ope,Integer.parseInt((String)b));
                                    //}else if(a instanceof String && b instanceof Nodo){
                                    //    RESULT=new Expression(Integer.parseInt((String)a),ope,(Nodo)b);
                                    //}else if(a instanceof Nodo && b instanceof String){
                                    //    RESULT=new Expression((Nodo)a,ope,Integer.parseInt((String)b));
                                    //}else if(a instanceof Nodo && b instanceof Nodo){
                                    //    RESULT=new Expression((Nodo)a,ope,(Nodo)b);
                                    //}
                                    //se crea el Nodo expresion con la nueva operacion.
                                    Expression e = new Expression(a, ope, b);
                                    //es una expresion de comparacion, por lo que se le da true al flag(importante para derivar los resultados de operaciones).
                                    e.setEsComparacion(true);
                                    RESULT=e;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID CORCH_IZQ expression CORCH_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        //se crea el Nodo Var con un id y un Nodo expresion que puede ser un Nodo o un Numero.
                        //if(ex instanceof Nodo){
                        //    RESULT= new Var(id,(Nodo)ex);    
                        //}else{
                        //    RESULT= new Var(id,Integer.parseInt((String)ex));
                        //}
                        RESULT= new Var(id,ex);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //se crea el nodo Var.
                        RESULT= new Var(id);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=si;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= var ASSIGN expression 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //desde aqui las derivaciones por la derecha pueden ser nodos (Call, Var o Expression) 
                            //o NUM (como String, pero guardado en el nodo como Integer).
                            //por lo que es nesesario diferenciar el guardado en el nodo.
                            //if(ex instanceof String){
                            //    //expression correpsonde a un numero.
                            //    RESULT=new Expression(v,as,Integer.parseInt((String)ex));
                            //}else{
                            //    //corresponde a un Nodo.
                            //    RESULT=new Expression(v,as,(Nodo)ex);
                            //}

                            //creo el nodo expression.
                            Expression e = new Expression(v,as,ex);
                            //asigno el valor.
                            e.asignarValor();
                            
                            RESULT=e;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN expression PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR PARENT_IZQ expression COMA expression COMA expression PARENT_DER statement 
            {
              Object RESULT =null;
		
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE PARENT_IZQ expression PARENT_DER statement 
            {
              Object RESULT =null;
		
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= for_stmt 
            {
              Nodo RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= while_stmt 
            {
              Nodo RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PARENT_IZQ expression PARENT_DER statement ELSE statement 
            {
              Nodo RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_stmt ::= IF PARENT_IZQ expression PARENT_DER statement 
            {
              Nodo RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_stmt ::= expression PUNTOCOMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iteration_stmt NT$0 return_stmt 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo ite = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ret = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=ret;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ite = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                            RESULT=ite;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              Nodo RESULT =null;
		int selleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int selright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo sel = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=sel;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              Nodo RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo com = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=com;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            //corresponde a un numero. lo que seria muy extraño, ¿la gramatica aceptaria '1;' sin asignacion a variable?
                            //if(ex instanceof String){
                            //    RESULT=new Var(Integer.parseInt((String)ex));
                            //}else{
                            //    RESULT=(Nodo)ex; //en teoria esta mal, pero se parsea ya que es feo que llege al 'num;'.    
                            //}
                            RESULT=ex;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= empty 
            {
              ArrayList<Nodo> RESULT =null;
		
                                //se crea la lista de nodos de statements.
                                ArrayList<Nodo> list = new ArrayList<Nodo>();
                                RESULT=list;//se envia la lista creada.
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              ArrayList<Nodo> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> list = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int staleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int staright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo sta = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                //condicionante usado si el nodo Statement es nulo.
                                if(sta != null){
                                    list.add(sta);
                                }else{
                                    //no deberia entrar aqui.
                                    list= new ArrayList<Nodo>();
                                }
                                RESULT=list;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= empty 
            {
              ArrayList<Nodo> RESULT =null;
		
                                    //se crea la lista de nodos de variables locales.
                                    ArrayList<Nodo> list = new ArrayList<Nodo>();
                                    RESULT=list;//se envia la lista creada.
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              ArrayList<Nodo> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> list = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo var = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    //condicionante usado si el nodo variable es nulo.
                                    if(var != null){
                                        list.add(var);
                                    }else{
                                        //no entra aqui.
                                        list=new ArrayList<Nodo>();
                                    }
                                    RESULT=list;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= LLAVE_IZQ local_declarations statement_list LLAVE_DER 
            {
              Nodo RESULT =null;
		int list_decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list_decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> list_dec = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list_staleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_staright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> list_sta = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT= new Compound(list_dec,list_sta);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID CORCH_IZQ CORCH_DER 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    //se crea el nodo parametro (parametro vector).
                    RESULT=new Param(t, id, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    //se crea el nodo parametro.
                    RESULT=new Param(t,id,false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //creo el nodo de la funcion quen contendra la lista de parametros.
                        FunDec list= new FunDec();
                        //agrego el parametro a la lista del nodo.
                        list.agregarParametro(p);
                        RESULT=list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMA param 
            {
              Nodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo list = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //condicionante si el parametro no es nulo. en ese caso se agrega a la lista de paramentros del nodo Funcion.
                        if(p != null){
                            ((FunDec)list).agregarParametro(p);
                        }else{
                            //nunca entra aqui.
                            list=new FunDec();
                        }
                        RESULT=list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        //se crea el nodo directamente sin parametros.
                        RESULT=new FunDec(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT=lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID PARENT_IZQ params PARENT_DER compound_stmt 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo pa = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo com = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                //ingreso la id al nodo anteriormente creado.
                                ((FunDec) pa).setID(id);
                                //ingreso el tipo de funcion al nodo anteriormente creado.
                                ((FunDec) pa).setTipoFunction(t);

                                //condicionante usado si los componentes existen o no.
                                if(com != null){
                                    ((FunDec) pa).setCompound_stmt(com);
                                }
                                RESULT=(Nodo) pa;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT=v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT=i;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID CORCH_IZQ NUM CORCH_DER PUNTOCOMA 
            {
              Nodo RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                if(te.equalsIgnoreCase("int")){
                                    RESULT= new VarDec("INT", id, true, Integer.parseInt(num));
                                }else{
                                    RESULT=new VarDec("VOID", id, true, Integer.parseInt(num));
                                }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID PUNTOCOMA 
            {
              Nodo RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                if(te.equalsIgnoreCase("int")){
                                    RESULT= new VarDec("INT",id, false);
                                }else{
                                    RESULT=new VarDec("VOID",id, false);
                                }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=f;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT=v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                Program lista = new Program();
                                lista.agregarDeclaracion(d);
                                RESULT=lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Program RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program list = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                if(d != null){
                                    list.agregarDeclaracion(d);
                                }else{
                                    //no deberia llegar nunca aqui.
                                    list = new Program();
                                }
                                RESULT=list;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program dl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        System.out.println("Fin analisis sintactico.");
                        RESULT=dl; //envio la raiz para ser dibujado en grapher
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

