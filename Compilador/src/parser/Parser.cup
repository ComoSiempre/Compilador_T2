package parser;

import scanner.*;

/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
	public void report_error(String message, Object info) {
    	    StringBuilder m = new StringBuilder("Error");
        	if (info instanceof java_cup.runtime.Symbol) {
            	java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+message);
        //System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};

/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal String 	IF,INT,ELSE,RETURN,VOID,WHILE,FOR,SUMA,RESTA,MULTIPLICACION,
					DIVISION,EXPONENCIACION_1,EXPONENCIACION_2,ASSIGN,PARENT_IZQ,
					PARENT_DER,CORCH_IZQ,CORCH_DER,LLAVE_IZQ,LLAVE_DER,MENOR,MENIGUAL,
					MAYOR,MAYIGUAL,IGUALIGUAL,DISTINTO,PUNTOCOMA,COMA;
terminal String 	NUM; //se trabajara como string y se convertira a interger cuando sea nesesario.
terminal String 	ID;	


/* No terminales usados en la seccion gramatical. 

   es esta seccion se listara los objetos Nodo que contendran la gramatica
   y los que tengan un valor Object. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String.
*/
non terminal    program;
non terminal    declaration_list;
non terminal    declaration;
non terminal    var_declaration;
non terminal    fun_declaration;
non terminal    type_specifier;
non terminal    params;
non terminal    param_list;
non terminal    param;
non terminal    compound_stmt;
non terminal    local_declarations;
non terminal    statement_list;
non terminal    var_declarations;
non terminal    statement;
non terminal    expression_stmt;
non terminal    selection_stmt;
non terminal    iteration_stmt;
non terminal    return_stmt;
non terminal    expression;
non terminal    while_stmt;
non terminal    do_while_stmt;
non terminal    for_stmt;
non terminal    var;
non terminal    simple_expression;
non terminal    additive_expression;
non terminal    relop;
non terminal    addop;
non terminal    term;
non terminal    mulop;
non terminal    factor;
non terminal    powop;
non terminal    exp;
non terminal    call;
non terminal    args;
non terminal    arg_list;   
non terminal    empty; //representaria en epsilon en cup.

start with program;

/* ------------------- Seccion de la gramatica ------------------------ */

program     ::=     declaration_list
                    {:

                    :};

declaration_list    ::=     declaration_list declaration
                            {:

                            :}
                            |
                            declaration
                            {:

                            :};

declaration     ::=     var_declaration
                        {:

                        :}
                        |
                        fun_declaration
                        {:
                        :};

var_declaration     ::=     type_specifier ID PUNTOCOMA
                            {:
                            :}
                            |
                            type_specifier ID CORCH_IZQ NUM CORCH_DER PUNTOCOMA
                            {:
                            :};

type_specifier      ::=     INT
                            {:
                            :}
                            |
                            VOID
                            {:
                            :};

fun_declaration     ::=     type_specifier ID PARENT_IZQ params PARENT_DER compound_stmt
                            {:
                            :};

params      ::=     param_list
                    {:
                    :}
                    |
                    VOID
                    {:
                    :};

param_list  ::=     param_list COMA param
                    {:
                    :}
                    |
                    param
                    {:
                    :};

param   ::=     type_specifier ID
                {:
                :}
                |
                type_specifier ID CORCH_IZQ CORCH_DER
                {:
                :};

compound_stmt   ::=     LLAVE_IZQ local_declarations statement_list LLAVE_DER
                        {:
                        :};

local_declarations      ::=     local_declarations var_declarations
                                {:
                                :}
                                |
                                empty
                                {:
                                :}; 

statement_list      ::=     statement_list statement
                            {:
                            :}
                            |
                            empty
                            {:
                            :};

statement       ::=     expression_stmt
                        {:
                        :}
                        |
                        compound_stmt
                        {:
                        :}
                        |
                        selection_stmt
                        {:
                        :}
                        |
                        iteration_stmt
                        {:
                        :}
                        return_stmt
                        {:
                        :};

expression_stmt     ::=     expression PUNTOCOMA
                            {:
                            :}
                            |
                            PUNTOCOMA
                            {:
                            :};

selection_stmt      ::=     IF PARENT_IZQ expression PARENT_DER statement
                            {:
                            :}
                            |
                            IF PARENT_IZQ expression PARENT_DER statement ELSE statement
                            {:
                            :};

iteration_stmt      ::=     while_stmt
                            {:
                            :}
                            |
                            do_while_stmt
                            {:
                            :};

while_stmt      ::=     WHILE PARENT_IZQ expression PARENT_DER statement
                        {:
                        :};

for_stmt        ::=     FOR PARENT_IZQ expression COMA expression COMA expression PARENT_DER statement
                        {:
                        :};

return_stmt     ::=     RETURN PUNTOCOMA
                        {:
                        :}
                        |
                        RETURN expression PUNTOCOMA
                        {:
                        :};

expression      ::=     var ASSIGN expression
                        {:
                        :}
                        |
                        simple_expression
                        {:
                        :};

var         ::=     ID
                    {:
                    :}
                    |
                    ID CORCH_IZQ expression CORCH_DER
                    {:
                    :};

simple_expression       ::=     additive_expression relop additive_expression
                                {:
                                :}
                                |
                                additive_expression
                                {:
                                :};

relop       ::=     MENIGUAL
                    {:
                    :}
                    MENOR
                    {:
                    :}
                    MAYOR
                    {:
                    :}
                    MAYIGUAL
                    {:
                    :}
                    IGUALIGUAL
                    {:
                    :}
                    DISTINTO
                    {:
                    :};

additive_expression     ::=     additive_expression addop term
                                {:
                                :}
                                |
                                term
                                {:
                                :};

addop       ::=     SUMA
                    {:
                    :}
                    |
                    RESTA
                    {:
                    :};

term        ::=     term mulop factor
                    {:
                    :}
                    |
                    factor
                    {:
                    :};

mulop       ::=     MULTIPLICACION
                    {:
                    :}
                    |
                    DIVISION
                    {:
                    :};

factor      ::=     factor powop exp
                    {:
                    :}
                    |
                    exp
                    {:
                    :};

powop       ::=     EXPONENCIACION_1 //^
                    {:
                    :}
                    |
                    EXPONENCIACION_2 //**
                    {:
                    :};                                                                                                                                                                                                                                                                                        

exp         ::=     PARENT_IZQ expression PARENT_DER
                    {:
                    :}
                    |
                    var
                    {:
                    :}
                    |
                    call
                    {:
                    :}
                    |
                    NUM
                    {:
                    :};

call    ::=     ID PARENT_IZQ args PARENT_DER
                {:
                :};

args    ::=     arg_list
                {:
                :}
                |
                empty
                {:
                :};

arg_list    ::=     arg_list COMA expression
                    {:
                    :}
                    |
                    expression
                    {:
                    :};

/* Gramatica nesesaria */
empty   ::= /* vacio */;                                                   